[{"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\index.js":"1","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\App.js":"2","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\reportWebVitals.js":"3","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Login\\Login.jsx":"4","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Admin\\Admin.jsx":"5","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Domain\\useCases.jsx":"6","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Admin\\Nav.jsx":"7","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Admin\\SwitchComponent.jsx":"8","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Admin\\Footer.jsx":"9","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Components\\MountTransition.jsx":"10","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Dashboard\\Dashboard.jsx":"11","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Saldos\\SaldosPage.jsx":"12","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Pedidos\\PedidosPage.jsx":"13","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Components\\Loading.jsx":"14","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Services\\PedidosRepository.jsx":"15","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Services\\FornecedoresRepository.jsx":"16","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Dashboard\\AnualRequestesComponent.jsx":"17","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Dashboard\\StatsComponent.jsx":"18","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Dashboard\\EmpresasComponent.jsx":"19","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Pedidos\\SearchPedidosComponent.jsx":"20","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\PedidosFormPage\\PedidosForm.jsx":"21","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Components\\FormComponent.jsx":"22","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\PedidosFormPage\\RubricasComponent.jsx":"23","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Services\\GruposRepository.jsx":"24","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Services\\ArtigosRepository.jsx":"25","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\PedidosFormPage\\SearchArticle.jsx":"26","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\PedidosFormPage\\SubmitForm.jsx":"27","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Saldos\\RubricasComponent.jsx":"28","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Saldos\\FaturasComponent.jsx":"29","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\ArtigosPage\\ArtigosComponent.jsx":"30","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Pedidos\\PerformSearch.jsx":"31","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Pedidos\\DeletePedidoComponent.jsx":"32","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\GerirGrupos\\GerirGruposPage.jsx":"33","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\AddGroup\\AddGroup.jsx":"34","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\AddGroup\\SubmitForm.jsx":"35","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\GerirGrupos\\DeleteGrupoComponent.jsx":"36","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\GerirGrupos\\MembersComponent.jsx":"37"},{"size":803,"mtime":1611661140763,"results":"38","hashOfConfig":"39"},{"size":1188,"mtime":1611652423725,"results":"40","hashOfConfig":"39"},{"size":375,"mtime":1611652424350,"results":"41","hashOfConfig":"39"},{"size":2216,"mtime":1611658332759,"results":"42","hashOfConfig":"39"},{"size":4473,"mtime":1611744960530,"results":"43","hashOfConfig":"39"},{"size":12272,"mtime":1611749964715,"results":"44","hashOfConfig":"39"},{"size":2080,"mtime":1611652423803,"results":"45","hashOfConfig":"39"},{"size":2704,"mtime":1611744960546,"results":"46","hashOfConfig":"39"},{"size":143,"mtime":1611652423803,"results":"47","hashOfConfig":"39"},{"size":463,"mtime":1611652423788,"results":"48","hashOfConfig":"39"},{"size":439,"mtime":1611652423819,"results":"49","hashOfConfig":"39"},{"size":6254,"mtime":1611652424303,"results":"50","hashOfConfig":"39"},{"size":23648,"mtime":1611747642694,"results":"51","hashOfConfig":"39"},{"size":411,"mtime":1611652423788,"results":"52","hashOfConfig":"39"},{"size":4834,"mtime":1611652424319,"results":"53","hashOfConfig":"39"},{"size":2504,"mtime":1611652424303,"results":"54","hashOfConfig":"39"},{"size":4673,"mtime":1611652423819,"results":"55","hashOfConfig":"39"},{"size":6571,"mtime":1611652423866,"results":"56","hashOfConfig":"39"},{"size":8275,"mtime":1611652423834,"results":"57","hashOfConfig":"39"},{"size":3315,"mtime":1611652424241,"results":"58","hashOfConfig":"39"},{"size":25755,"mtime":1611744960593,"results":"59","hashOfConfig":"39"},{"size":502,"mtime":1611652423741,"results":"60","hashOfConfig":"39"},{"size":2589,"mtime":1611744960593,"results":"61","hashOfConfig":"39"},{"size":3109,"mtime":1611749964923,"results":"62","hashOfConfig":"39"},{"size":904,"mtime":1611652424303,"results":"63","hashOfConfig":"39"},{"size":751,"mtime":1611652424256,"results":"64","hashOfConfig":"39"},{"size":905,"mtime":1611652424256,"results":"65","hashOfConfig":"39"},{"size":3756,"mtime":1611652424256,"results":"66","hashOfConfig":"39"},{"size":2579,"mtime":1611652424256,"results":"67","hashOfConfig":"39"},{"size":2684,"mtime":1611652423803,"results":"68","hashOfConfig":"39"},{"size":1577,"mtime":1611652424225,"results":"69","hashOfConfig":"39"},{"size":541,"mtime":1611744960577,"results":"70","hashOfConfig":"39"},{"size":10858,"mtime":1611755256731,"results":"71","hashOfConfig":"39"},{"size":7668,"mtime":1611744960530,"results":"72","hashOfConfig":"39"},{"size":963,"mtime":1611744960530,"results":"73","hashOfConfig":"39"},{"size":574,"mtime":1611747402323,"results":"74","hashOfConfig":"39"},{"size":5734,"mtime":1611755255327,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"yvwzgr",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"78"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"78"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"78"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\index.js",[],["164","165"],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\App.js",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\reportWebVitals.js",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Login\\Login.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Admin\\Admin.jsx",["166"],"import React from 'react'\r\nimport { Link, BrowserRouter} from 'react-router-dom'\r\nimport { createBrowserHistory } from 'history'\r\nimport loadable from '@loadable/component'\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport LocalShippingIcon from '@material-ui/icons/LocalShipping';\r\nimport EuroIcon from '@material-ui/icons/Euro';\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\nimport { Typography, Drawer,Divider, IconButton } from '@material-ui/core';\r\nimport {useAuth0} from \"@auth0/auth0-react\"\r\nimport {useSetAccessToken} from \"../../Domain/useCases\"\r\nimport { AnimatePresence } from 'framer-motion'\r\nimport SwitchComponent from \"./SwitchComponent\"\r\nimport AllInboxIcon from '@material-ui/icons/AllInbox';\r\n\r\nconst appBarHeight = 65\r\nconst Nav = loadable(() => import('.//Nav'))\r\nconst Footer = loadable(() => import('./Footer'))\r\n\r\nconst Admin = () => {\r\n    const [hideMenu, setHideMenu] = React.useState(true) \r\n    const closeMenu = ()=> setHideMenu(true)\r\n    const { getAccessTokenSilently } = useAuth0();\r\n    const [accessToken, setAccessToken] = React.useState(null) \r\n    const switchComponent = <SwitchComponent />\r\n    const history = React.useMemo(() => {\r\n        return createBrowserHistory()\r\n      }, [])\r\n   \r\n      React.useEffect(() => {\r\n        return history.listen(()=>{\r\n          window.scrollTo(0,0)\r\n        })  \r\n      }, [ history])\r\n\r\n      React.useEffect(()=>{\r\n        const setAccessTokenFun = async () => {        \r\n            try {\r\n                const access_token = await getAccessTokenSilently();\r\n                setAccessToken(access_token)\r\n            } catch (e) {\r\n              console.log(e.message);\r\n            }\r\n          };\r\n          setAccessTokenFun()\r\n     }, [])\r\n     \r\n     useSetAccessToken(accessToken) \r\n     \r\n    return (\r\n        <BrowserRouter history={history}>\r\n            <Drawer\r\n                variant=\"temporary\"\r\n                anchor=\"left\"\r\n                open={!hideMenu}\r\n                className=\"drawerContainer\">\r\n                    <div className=\"drawerHeader\">\r\n                        <Typography variant=\"h6\">Gestão de Pedidos</Typography>\r\n                        <IconButton onClick={closeMenu}>\r\n                            <ArrowBackIcon/>\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                    <div className=\"navListContainer\">\r\n                        <ul>\r\n                            <li onClick={closeMenu}>\r\n                                <Link to=\"/dashboard\">\r\n                                    <DashboardIcon/>\r\n                                     Resumo\r\n                                </Link>\r\n                            </li>\r\n                            <li onClick={closeMenu}>\r\n                                <Link to=\"/pedidos\">\r\n                                    <LocalShippingIcon/>\r\n                                      Pedidos de Encomendas\r\n                                </Link>\r\n                            </li>\r\n                            <li onClick={closeMenu}>\r\n                                <Link to=\"/gerirGrupos\">\r\n                                    <EuroIcon/>\r\n                                      Grupos de Investigação\r\n                                </Link>\r\n                            </li>\r\n                            <li onClick={closeMenu}>\r\n                                <Link to=\"/saldo\">\r\n                                    <CreditCardIcon/>\r\n                                      Saldo Empresarial\r\n                                </Link>\r\n                            </li>\r\n                            <li onClick={closeMenu}>\r\n                                <Link to=\"/artigos\">\r\n                                    <AllInboxIcon/>\r\n                                      Gestão de Artigos\r\n                                </Link>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n            </Drawer>\r\n            <Nav hideMenu={hideMenu} setHideMenu={setHideMenu} height={appBarHeight}/>\r\n            <main  style={{marginTop: appBarHeight}}>\r\n              <AnimatePresence exitBeforeEnter={true} initial={false}>\r\n                {switchComponent}\r\n              </AnimatePresence>\r\n            </main>\r\n            <Footer />\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\n\r\nexport default Admin","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Domain\\useCases.jsx",["167"],"import { useQuery} from 'react-query'\r\nimport { Container } from 'typedi'\r\nimport Pedidos from \"../Services/PedidosRepository\"\r\nimport Fornecedores from \"../Services/FornecedoresRepository\"\r\nimport Grupos from \"../Services/GruposRepository\"\r\nimport Artigos from \"../Services/ArtigosRepository\"\r\n\r\nlet accessToken \r\n\r\nexport const useSetAccessToken =  at => accessToken = at\r\n\r\nexport const useGetNumPedidos = () =>{\r\n    const pedidos = Container.get(Pedidos)\r\n    return useQuery({\r\n        queryKey: ['get_num_pedidos'],\r\n        queryFn: async () => {\r\n            const info =  await pedidos.getNumPedidos()\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport const useQueryPedidos = () =>{\r\n    const pedidos = Container.get(Pedidos)\r\n    return useQuery({\r\n        queryKey: ['query_pedidos'],\r\n        queryFn: async () => {\r\n            const info =  await pedidos.queryPedidos()\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n        }\r\n    })\r\n}\r\nexport const useGetPedidosAnual = () =>{\r\n    const pedidos = Container.get(Pedidos)\r\n    return useQuery({\r\n        queryKey: ['get_pedidos_anual'],\r\n        queryFn: async () => {\r\n            const info =  await pedidos.getPedidosAnual()\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n        }\r\n    })\r\n}\r\nexport const useGetPedidosNaoEncomendados = () =>{\r\n    const pedidos = Container.get(Pedidos)\r\n    return useQuery({\r\n        queryKey: ['get_pedidos_nao_encomendados'],\r\n        queryFn: async () => {\r\n            const info =  await pedidos.getPedidosNaoEncomendados()\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n        }\r\n    })\r\n}\r\nexport const useGetPedidosAtrasados = () =>{\r\n    const pedidos = Container.get(Pedidos)\r\n    return useQuery({\r\n        queryKey: ['get_pedidos_atrasados'],\r\n        queryFn: async () => {\r\n            const info =  await pedidos.getPedidosAtrasados()\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n        }\r\n    })\r\n}\r\n\r\nexport const useGetFornecedoresStats = () =>{\r\n    const fornecedores = Container.get(Fornecedores)\r\n    return useQuery({\r\n        queryKey: ['get_fornecedores_stats'],\r\n        queryFn: async () => {\r\n            const info =  await fornecedores.getFornecedoresStats()\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport const useGetPedidos = () =>{\r\n    const pedidos = Container.get(Pedidos)\r\n    return useQuery({\r\n        queryKey: ['get_pedidos'],\r\n        queryFn: async () => {\r\n            const info =  await pedidos.getPedidos()\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n        }\r\n    })\r\n}\r\n\r\nexport const useGetGrupos = () =>{\r\n    const grupos = Container.get(Grupos)\r\n    return useQuery({\r\n        queryKey: ['get_grupos'],\r\n        queryFn: async () => {\r\n            const info =  await grupos.getGrupos()\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n        }\r\n    })\r\n}\r\n\r\nexport const useGetFornecedores = () =>{\r\n    const fornecedores = Container.get(Fornecedores)\r\n    return useQuery({\r\n        queryKey: ['get_fornecedores'],\r\n        queryFn: async () => {\r\n            const info =  await fornecedores.getFornecedores()\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n        }\r\n    })\r\n}\r\n\r\nexport const useGetArticle = term =>{\r\n    const artigos = Container.get(Artigos)\r\n    return useQuery({\r\n        queryKey: ['get_article'],\r\n        queryFn: async () => {\r\n            const info =  await artigos.getArticle(term)\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n        }\r\n    })\r\n}\r\n\r\nexport const useSendPedidos = data =>{\r\n    const pedidos = Container.get(Pedidos)\r\n    return useQuery({\r\n        queryKey: ['send_pedido'],\r\n        queryFn: async () => {\r\n            const info =  await pedidos.sendPedidos(data)\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n        }\r\n    })\r\n}\r\n\r\nexport const useGetDist = () =>{\r\n    const grupos = Container.get(Grupos)\r\n    return useQuery({\r\n        queryKey: ['get_dist'],\r\n        queryFn: async () => {\r\n            const info =  await grupos.getDist()\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n        }\r\n    })\r\n}\r\n\r\nexport const useGetRubricasByEmppresa = (empresa) =>{\r\n    const fornecedores = Container.get(Fornecedores)\r\n    return useQuery({\r\n        queryKey: ['get_rub_by_empresa'],\r\n        queryFn: async () => {\r\n            const info =  await fornecedores.getRubricasByEmpresa(empresa)\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n          cacheTime: 0\r\n        }\r\n    })\r\n}\r\n\r\nexport const useGetEmpresasByRubrica = (rubrica) =>{\r\n    const fornecedores = Container.get(Fornecedores)\r\n    return useQuery({\r\n        queryKey: ['get_emp_by_rub'],\r\n        queryFn: async () => {\r\n            const info =  await fornecedores.getEmpresasByRubrica(rubrica)\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n          cacheTime: 0\r\n        }\r\n    })\r\n}\r\n\r\nexport const useGetFaturasByEmppresa = (empresa) =>{\r\n    const fornecedores = Container.get(Fornecedores)\r\n    return useQuery({\r\n        queryKey: ['get_fat_by_empresa'],\r\n        queryFn: async () => {\r\n            const info =  await fornecedores.getFaturasByEmpresa(empresa)\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n        }\r\n    })\r\n}\r\n\r\nexport const useGetArtigos = () =>{\r\n    const artigos = Container.get(Artigos)\r\n    return useQuery({\r\n        queryKey: ['get_articles'],\r\n        queryFn: async () => {\r\n            const info =  await artigos.fetchArticles()\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n        }\r\n    })\r\n}\r\n\r\nexport const useSearchPedidos = (word, field) =>{\r\n    const pedidos = Container.get(Pedidos)\r\n    return useQuery({\r\n        queryKey: ['search_pedidos'],\r\n        queryFn: async () => {\r\n            const info =  await pedidos.searchPedidos(word, field)\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n          cacheTime: 0\r\n        }\r\n    })\r\n}\r\n\r\nexport const useGetPedidoByID = (id) =>{\r\n    const pedidos = Container.get(Pedidos)\r\n    return useQuery({\r\n        queryKey: ['get_pedido_by_id'],\r\n        queryFn: async () => {\r\n            const info =  await pedidos.getPedidoById(id)\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n          cacheTime: 0\r\n        }\r\n    })\r\n}\r\n\r\nexport const useEditPedido = (data, id) =>{\r\n    const pedidos = Container.get(Pedidos)\r\n    return useQuery({\r\n        queryKey: ['edit_pedido'],\r\n        queryFn: async () => {\r\n            const info =  await pedidos.editPedido(data, id)\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n          cacheTime: 0\r\n        }\r\n    })\r\n}\r\n\r\nexport const useDeletePedido = (id) =>{\r\n    const pedidos = Container.get(Pedidos)\r\n    return useQuery({\r\n        queryKey: ['delete_pedido'],\r\n        queryFn: async () => {\r\n            const info =  await pedidos.deletePedido(id)\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n          cacheTime: 0\r\n        }\r\n    })\r\n}\r\n\r\nexport const useNovoGrupo = (grupo) =>{\r\n    const grupos = Container.get(Grupos)\r\n    return useQuery({\r\n        queryKey: ['novo_grupo'],\r\n        queryFn: async () => {\r\n            const info =  await grupos.novoGrupo(grupo)\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n          cacheTime: 0\r\n        }\r\n    })\r\n}\r\n\r\nexport const useGetGrupoByID = (id) =>{\r\n    const grupos = Container.get(Grupos)\r\n    return useQuery({\r\n        queryKey: ['grupo_by_id'],\r\n        queryFn: async () => {\r\n            const info =  await grupos.getGrupoById(id)\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n          cacheTime: 0\r\n        }\r\n    })\r\n}\r\n\r\nexport const useEditGrupo = (id) =>{\r\n    const grupos = Container.get(Grupos)\r\n    return useQuery({\r\n        queryKey: ['edit_grupo'],\r\n        queryFn: async () => {\r\n            const info =  await grupos.editGrupo(id)\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n          cacheTime: 0\r\n        }\r\n    })\r\n}\r\n\r\nexport const useDeleteGrupo = (id) =>{\r\n    const grupos = Container.get(Grupos)\r\n    return useQuery({\r\n        queryKey: ['delete_grupo'],\r\n        queryFn: async () => {\r\n            const info =  await grupos.deleteGrupo(id)\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n          cacheTime: 0\r\n        }\r\n    })\r\n}\r\n\r\nexport const useGetGrupoMembros = (id) =>{\r\n    const grupos = Container.get(Grupos)\r\n    return useQuery({\r\n        queryKey: ['get_grupo_membros'],\r\n        queryFn: async () => {\r\n            const info =  await grupos.getGrupoMembros(id)\r\n            return info\r\n        },\r\n        config: { \r\n          refetchOnWindowFocus: false,\r\n          refetchInterval: false,\r\n          refetchIntervalInBackground: false,\r\n          cacheTime: 0\r\n        }\r\n    })\r\n}","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Admin\\Nav.jsx",["168"],"import React from 'react'\r\nimport {AppBar, Toolbar, Typography,Menu, MenuItem ,Button} from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport { Avatar} from \"@material-ui/core\"\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Nav = (props) => {\r\n    const { logout, user} = useAuth0();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const handleClick = (event) => {\r\n      setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n      setAnchorEl(null);\r\n    };\r\n    return (\r\n        <AppBar className={props.hideMenu? \"navContainer\": \"navContainer openMenuNav\"} color=\"inherit\" height={props.height} position=\"fixed\">\r\n        <Toolbar className=\"contentContainer\">\r\n            <div className=\"iconContainer\">\r\n                <IconButton onClick={()=>props.setHideMenu(false)} className={!props.hideMenu? \"hide\": \"\"}>\r\n                    <MenuIcon  className=\"openMenu\" />\r\n                </IconButton>   \r\n                <Typography className={!props.hideMenu? \"titleText hide\": \"titleText\"}> \r\n                    <Link to=\"/\">\r\n                        Gestão de Pedidos\r\n                    </Link>\r\n                </Typography>\r\n            </div>\r\n            <div className=\"navAccountContainer\">\r\n                <Avatar style={{marginLeft: 20}}onClick={handleClick} alt=\"avatar\" src={user.picture} />\r\n                <Menu\r\n                    id=\"simple-menu\"\r\n                    anchorEl={anchorEl}\r\n                    keepMounted\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={handleClose}\r\n                    className=\"navMenuContainer\"\r\n                >\r\n                    <MenuItem component={Link} to=\"/settings\" onClick={handleClose}>Configurações</MenuItem>\r\n                    <MenuItem onClick={()=>logout()}>Logout</MenuItem>\r\n                </Menu>\r\n            </div>\r\n        </Toolbar>\r\n    </AppBar>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Admin\\SwitchComponent.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Admin\\Footer.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Components\\MountTransition.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Dashboard\\Dashboard.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Saldos\\SaldosPage.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Pedidos\\PedidosPage.jsx",["169"],"import React from 'react'\r\nimport Loading from \"../../Components/Loading\"\r\nimport {Link} from \"react-router-dom\"\r\nimport { Paper,\r\n    Button,\r\n    Typography,\r\n    TableContainer,\r\n    Menu, \r\n    MenuItem,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n    Tooltip, \r\n    Popover, \r\n    IconButton, \r\n    Collapse,\r\n    DialogTitle,\r\n    Dialog,\r\n    DialogActions, \r\n    DialogContent,\r\n    DialogContentText, \r\n    Snackbar\r\n} from '@material-ui/core'\r\nimport {\r\n    useGetPedidos\r\n} from \"../../Domain/useCases\"\r\nimport SearchComponent from \"./SearchPedidosComponent\"\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport WidgetsIcon from '@material-ui/icons/Widgets';\r\nimport WhatshotIcon from '@material-ui/icons/Whatshot';\r\nimport GestureIcon from '@material-ui/icons/Gesture';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport DeletePedido from \"./DeletePedidoComponent\"\r\n\r\nconst PedidosPage = () => {\r\n    const [pedidosList, setPedidosList] = React.useState(null);\r\n    const [anchorPedidos, setAnchorPedidos] = React.useState(null);\r\n    const [anchorFaturacao, setAnchorFaturacao] = React.useState(null);\r\n    const [selectedPedido, setSelectedPedido] = React.useState(null);\r\n    const [openCollapsePedido, setOpenCollapsePedido] = React.useState(null);\r\n    const [faturacaoData, setFaturacaoData] = React.useState(null)\r\n    const [showComment, setShowComment] = React.useState(null)\r\n    const [openDelete, setOpenDelete] = React.useState(false);\r\n    const [deletePedido, setDeletePedido] = React.useState(false);\r\n    const [deleteResult, setDeleteResult] = React.useState(null);\r\n\r\n    const Rubricas = {\r\n        \"gestures\": ()=> <GestureIcon style={{color: \"#9b59b6\"}}/>, \r\n        \"whatshot\":()=>  <WhatshotIcon style={{color: \"#e74c3c\"}}/>,\r\n        \"widget\": ()=> <WidgetsIcon style={{color: \"#3498db\"}}/>,\r\n    }\r\n\r\n    const {\r\n        data: pedidos, \r\n        isFetching: fetchingPedidos, \r\n        refetch\r\n    } = useGetPedidos()\r\n\r\n    React.useEffect(()=>{\r\n        if(!fetchingPedidos){\r\n            setPedidosList(pedidos)\r\n        }\r\n    }, [fetchingPedidos])\r\n\r\n    \r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        } \r\n        refetch()\r\n        setOpenDelete(false)\r\n\r\n    };\r\n\r\n    if(fetchingPedidos || !pedidosList) return <Loading msg=\"A carregar os pedidos\" />\r\n    return (\r\n        <>\r\n        {pedidosList.data.length === 0 && <Paper style={{\r\n            padding: \"10px 20px\",\r\n            width: \"calc(100% - 300px)\",\r\n            marginTop: 50\r\n        }}>\r\n            <Typography>Sem pedidos para apresentar. <Button component={Link} to=\"/pedidos/registo\" color=\"primary\">registar pedido</Button></Typography>    \r\n        </Paper>}\r\n       {pedidosList.data.length > 0&& <div className=\"pedidosContainer\">\r\n                \r\n            <Dialog onClose={()=>{\r\n                setOpenDelete(false)\r\n                setDeleteResult(null)\r\n                setDeletePedido(false)\r\n                refetch()\r\n            }} aria-labelledby=\"simple-dialog-title\" open={openDelete}>\r\n            <DialogTitle id=\"alert-dialog-title\">{\"Tem a certeza que pretende apagar o pedido\"}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                    O pedido será apagado permanentemente da base de dados. Tem a certeza que pretende continuar?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {!deletePedido && <Button style={{color: \"#e74c3c\"}}onClick={()=>{setDeletePedido(true)}}>\r\n                        apagar\r\n                    </Button>}\r\n                    {deletePedido && <DeletePedido\r\n                        id={selectedPedido} \r\n                        setDeleteResult={setDeleteResult}/>}\r\n                    <Button onClick={()=>setOpenDelete(false)} autoFocus>\r\n                        cancelar\r\n                    </Button>\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n            <div className=\"pedidosHeader\">\r\n                <Button component={Link} to=\"/pedidos/registo\" color=\"primary\" variant=\"contained\">registar pedido</Button>\r\n                <Paper className=\"searchContainer\">\r\n                    <SearchComponent setPedidosList={setPedidosList} refetch={refetch}/>\r\n                </Paper>\r\n            </div>\r\n            <TableContainer style={{paddingTop: \"20px\"}} component={Paper}>\r\n                <Table size=\"small\">\r\n                    <TableHead>\r\n                        <TableRow >\r\n                            <TableCell ></TableCell>\r\n                            <TableCell style={{color: \"#878787\"}} >Data Pedido</TableCell>\r\n                            <TableCell style={{color: \"#878787\"}} >Rúbrica</TableCell>\r\n                            <TableCell style={{color: \"#878787\"}} >Remetente</TableCell>\r\n                            <TableCell style={{color: \"#878787\"}} >Grupo</TableCell>\r\n                            <TableCell style={{color: \"#878787\"}} >Empresa</TableCell>\r\n                            <TableCell style={{color: \"#878787\"}} >Valor Total</TableCell>\r\n                            <TableCell style={{color: \"#878787\"}} >Fatura</TableCell>\r\n                            <TableCell ></TableCell>\r\n\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {pedidosList.data.map((p,i)=>{\r\n                            return (\r\n                                <>\r\n                                    <TableRow key={`pedido_${i}`}>\r\n                                        <TableCell  component=\"th\" scope=\"row\">\r\n                                            <Tooltip title={ p.pedido_feito? `Pedido feito em ${p.pedido.pedido_feito_formated_date}`: \"Este pedido ainda não foi realizado\"}>\r\n                                                <StarIcon style={{\r\n                                                    color: p.pedido_feito? \"#f1c40f\": \"#DCDCDC\",\r\n                                                    fontSize: 30\r\n                                                }}/>\r\n                                            </Tooltip>\r\n                                        </TableCell>\r\n                                        <TableCell  component=\"th\" scope=\"row\">\r\n                                            {String(p.day).length > 1?p.day: `0${p.day}` }/{String(p.mounth).length > 1?p.mounth: `0${p.mounth}` }/{p.year}\r\n                                        </TableCell>\r\n                                        <TableCell  component=\"th\" scope=\"row\">\r\n                                            <Tooltip title={p.rubrica.name}>\r\n                                                {Rubricas[p.rubrica.icon]()}\r\n                                            </Tooltip>\r\n                                        </TableCell>\r\n                                        <TableCell  component=\"th\" scope=\"row\">\r\n                                            {p.remetente}\r\n                                        </TableCell>\r\n                                        <TableCell  component=\"th\" scope=\"row\">\r\n                                            <Tooltip title={p.grupo.length < 30? \"\":p.grupo}>\r\n                                                <Typography>\r\n                                                    {p.grupo.length > 30? `${p.grupo.substring(0,30)}...`: p.grupo}\r\n                                                </Typography>\r\n                                            </Tooltip>\r\n                                        </TableCell>\r\n                                        <TableCell  component=\"th\" scope=\"row\">\r\n                                            <Tooltip title={p.empresa.length < 30? \"\":p.empresa}>\r\n                                                <Typography>\r\n                                                    {p.empresa.length > 30? `${p.empresa.substring(0,30)}...`: p.empresa}\r\n                                                </Typography>\r\n                                            </Tooltip>\r\n\r\n                                        </TableCell>\r\n                                        <TableCell  component=\"th\" scope=\"row\">\r\n                                            {p.valor_total} €\r\n                                        </TableCell>\r\n                                        <TableCell  component=\"th\" scope=\"row\">\r\n                                            {p.faturas.length > 0 && <>\r\n                                                <Tooltip title=\"Mais informação\">\r\n                                                    <IconButton onClick={(e)=>{\r\n                                                        setFaturacaoData(p.faturas)\r\n                                                        setAnchorFaturacao(e.target)\r\n                                                    }}style={{color: \"#2ecc71\"}}>\r\n                                                        <FileCopyIcon />\r\n                                                    </IconButton> \r\n                                                </Tooltip> \r\n                                            </>}\r\n                                            {p.faturas.length === 0 && <>\r\n                                                <Tooltip title=\"Fatura não entregue\">\r\n                                                    <IconButton disabled={true}>\r\n                                                        <FileCopyIcon style={{color: \"#dcdcdc\"}} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            </>}\r\n                                        </TableCell>\r\n                                        <TableCell  component=\"th\" scope=\"row\">\r\n                                            <IconButton onClick={(e)=>{\r\n                                                setSelectedPedido(p.id)\r\n                                                setAnchorPedidos(e.target)\r\n                                            }}>\r\n                                                <MoreVertIcon />\r\n                                            </IconButton>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow key={`Collapse_${i}`}>\r\n                                        <TableCell style={{padding:0 }} colSpan={9}>\r\n                                            <Collapse style={{backgroundColor: \"#2d3436\"}} in={openCollapsePedido === p.id} timeout=\"auto\" unmountOnExit>\r\n                                                <Table size=\"small\">\r\n                                                    <TableHead>\r\n                                                        <TableRow >\r\n                                                            <TableCell style={{borderColor: \"#232323\"}}></TableCell>\r\n                                                            <TableCell style={{borderColor: \"#232323\",color: \"#3498db\"}} align=\"right\">Referência</TableCell>\r\n                                                            <TableCell style={{borderColor: \"#232323\",color: \"#3498db\"}} align=\"right\">Artigo</TableCell>\r\n                                                            <TableCell style={{borderColor: \"#232323\",color: \"#3498db\"}} align=\"right\">Quantidade</TableCell>\r\n                                                            <TableCell style={{borderColor: \"#232323\",color: \"#3498db\"}} align=\"right\">Preço Unitário</TableCell>\r\n                                                            <TableCell style={{borderColor: \"#232323\",color: \"#3498db\"}} align=\"right\">Preço Total</TableCell>\r\n                                                            <TableCell style={{borderColor: \"#232323\",color: \"#3498db\"}} align=\"center\">Chegada</TableCell>\r\n                                                            <TableCell style={{borderColor: \"#232323\",color: \"#3498db\"}} align=\"right\">Guia</TableCell>\r\n                                                            <TableCell style={{borderColor: \"#232323\",color: \"#3498db\"}} align=\"center\">Faturado</TableCell>\r\n                                                            <TableCell style={{borderColor: \"#232323\"}} align=\"center\">\r\n                                                                <IconButton style={{color: \"white\"}} onClick={()=>{\r\n                                                                    setOpenCollapsePedido(null)\r\n                                                                }}>\r\n                                                                    <CloseIcon />\r\n                                                                </IconButton>\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    </TableHead>\r\n                                                    <TableBody>\r\n                                                        {p.artigos.map(a=>{\r\n                                                            return ( <TableRow key={`artigo_${a.referencia_artigo}`}>\r\n                                                             <TableCell style={{borderColor: \"#232323\"}} align=\"right\" component=\"th\" scope=\"row\">\r\n                                                                 {a.entrega.chegada && <CheckIcon style={{\r\n                                                                     color: \"#2ecc71\",\r\n                                                                     fontSize: 20\r\n                                                                 }}/>}\r\n                                                                  {!a.entrega.chegada && <ScheduleIcon style={{\r\n                                                                     color: \"#f1c40f\",\r\n                                                                     fontSize: 20\r\n                                                                 }}/>}\r\n                                                             </TableCell>\r\n                                                             <TableCell style={{borderColor: \"#232323\",color: \"white\"}}  align=\"right\" component=\"th\" scope=\"row\">\r\n                                                                 {a.referencia_artigo}\r\n                                                             </TableCell>\r\n                                                             <TableCell style={{borderColor: \"#232323\",color: \"white\"}}  align=\"right\" component=\"th\" scope=\"row\">\r\n                                                                 {a.artigo}\r\n                                                             </TableCell>\r\n                                                             <TableCell style={{borderColor: \"#232323\",color: \"white\"}}  align=\"right\" component=\"th\" scope=\"row\">\r\n                                                                 {a.quantidade}\r\n                                                             </TableCell>\r\n                                                             <TableCell style={{borderColor: \"#232323\",color: \"white\"}}  align=\"right\" component=\"th\" scope=\"row\">\r\n                                                                {a.preco} €\r\n                                                             </TableCell>\r\n                                                             <TableCell style={{borderColor: \"#232323\",color: \"white\"}}  align=\"right\" component=\"th\" scope=\"row\">\r\n                                                                 {a.preco * a.quantidade} €\r\n                                                             </TableCell>\r\n                                                             <TableCell style={{borderColor: \"#232323\"}}  align=\"center\" component=\"th\" scope=\"row\">\r\n                                                                 <VerifiedUserIcon style={{color: a.entrega.chegada? \"#3498db\": \"#bdc3c7\"}}/>\r\n                                                             </TableCell>\r\n                                                             <TableCell style={{borderColor: \"#232323\",color: \"white\"}}  align=\"right\" component=\"th\" scope=\"row\">\r\n                                                                {a.entrega.chegada? a.entrega.guia: \"ND\"}\r\n                                                             </TableCell>\r\n                                                             <TableCell style={{borderColor: \"#232323\"}} align=\"center\" component=\"th\" scope=\"row\">\r\n                                                                <IconButton style={{color: a.faturado? \"#2ecc71\" : \"#bdc3c7\"}}>\r\n                                                                    <DescriptionIcon/>\r\n                                                                </IconButton>\r\n                                                             </TableCell>\r\n                                                             <TableCell style={{borderColor: \"#232323\"}} align=\"center\" component=\"th\" scope=\"row\"></TableCell>\r\n                                                         </TableRow>)\r\n                                                        })}\r\n                                                    </TableBody>\r\n                                                </Table>\r\n                                                <div className=\"artigoInfoContainer\">\r\n                                                    <Typography> <strong style={{color: \"#3498db\"}}>Proposta:</strong> {p.proposta}</Typography>\r\n                                                    <Typography> <strong style={{color: \"#3498db\"}}>NE:</strong> {p.ne}</Typography>\r\n                                                    <Typography> <strong style={{color: \"#3498db\"}}>Cabimento:</strong> {p.cabimento}</Typography>\r\n                                                    {p.notas !== \"\" && <Tooltip title=\"Comentários\">\r\n                                                            <IconButton onClick={(e)=>{\r\n                                                                setShowComment(p.id)\r\n                                                            }} color=\"primary\">\r\n                                                                <CommentIcon/>\r\n                                                            </IconButton>\r\n                                                        </Tooltip>}\r\n                                                </div>\r\n                                                <Collapse  in={showComment === p.id} timeout=\"auto\" unmountOnExit>\r\n                                                    <div className=\"commentContainer\">\r\n                                                        {p.notas}\r\n                                                        <Button style={{color: \"white\"}} onClick={(e)=>{\r\n                                                            setShowComment(false)\r\n                                                        }} >\r\n                                                            fechar\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </Collapse>\r\n                                            </Collapse>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n           \r\n            <Popover \r\n                open={Boolean(anchorFaturacao)}\r\n                onClose={()=>setAnchorFaturacao(null)}\r\n                anchorEl={anchorFaturacao}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                }}\r\n            >\r\n                {faturacaoData &&  <>\r\n                    {faturacaoData.length > 0 &&<Table size=\"small\">\r\n                        <TableHead>\r\n                            <TableRow >\r\n                                <TableCell align=\"right\">Data de Emissão</TableCell>\r\n                                <TableCell align=\"right\">Códido</TableCell>\r\n                                <TableCell align=\"right\">Valor</TableCell>\r\n                                <TableCell align=\"right\">Notas</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {faturacaoData.map((f,i)=>{\r\n                                return (\r\n                                    <TableRow key={`fatura_${i}`}>\r\n                                            <TableCell align=\"right\">{f.data_emissao}</TableCell>\r\n                                            <TableCell align=\"right\">{f.name}</TableCell>\r\n                                            <TableCell align=\"right\">{f.valor_fatura} €</TableCell>\r\n                                            <TableCell align=\"right\">{f.notas}</TableCell>\r\n                                    </TableRow>\r\n                                )\r\n                            })}\r\n                        </TableBody>\r\n                    </Table>}\r\n                    {faturacaoData.length === 0 && <Typography>Não foram emitidas faturas</Typography>}\r\n                </>}\r\n            </Popover>\r\n            <Menu\r\n                id=\"pedidos_menu\"\r\n                anchorEl={anchorPedidos}\r\n                keepMounted\r\n                open={Boolean(anchorPedidos)}\r\n                onClose={()=>setAnchorPedidos(null)}\r\n            >\r\n                <MenuItem onClick={()=>{\r\n                    setOpenCollapsePedido(selectedPedido)\r\n                    setAnchorPedidos(null)\r\n                }}>MAIS DETALHES</MenuItem>\r\n                <MenuItem onClick={()=>setAnchorPedidos(null)}>FAZER PEDIDO</MenuItem>\r\n                <MenuItem component={Link} to={`/pedidos/edit/${selectedPedido}`} onClick={()=>setAnchorPedidos(null)}>EDITAR</MenuItem>\r\n                <MenuItem onClick={()=>{\r\n                    setAnchorPedidos(null)\r\n                    setOpenDelete(true)\r\n                }}>ELIMINAR</MenuItem>\r\n            </Menu>\r\n            {Boolean(deleteResult) &&<Snackbar open={true} autoHideDuration={5000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity={deleteResult.error? \"error\": \"success\"}>\r\n                    {deleteResult.error? deleteResult.msg: \"O pedido foi eliminado com sucesso!\"}\r\n                </Alert>\r\n            </Snackbar>}\r\n        </div>}\r\n        </>\r\n    )\r\n}\r\nexport default  PedidosPage\r\n\r\nconst Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Components\\Loading.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Services\\PedidosRepository.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Services\\FornecedoresRepository.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Dashboard\\AnualRequestesComponent.jsx",["170","171"],"import React from 'react'\r\nimport {useGetPedidosAnual} from \"../../Domain/useCases\"\r\nimport {Bar} from \"react-chartjs-2\"\r\nimport Skeleton from '@material-ui/lab/Skeleton'\r\nimport { Typography, Paper} from '@material-ui/core'\r\n\r\nconst AnualRequestesComponent = () => {\r\n    const [datasets, setDatasets] = React.useState(null)\r\n    const {\r\n        data: pedidosAnual, \r\n        isFetching: fetchingPedidosAnual\r\n    } = useGetPedidosAnual()\r\n   \r\n    const isLoading = React.useMemo(() => {\r\n        return  fetchingPedidosAnual\r\n    }, [fetchingPedidosAnual])\r\n\r\n    React.useEffect(()=>{\r\n        let tempDatasets=[]\r\n        if(!fetchingPedidosAnual){\r\n            Object.keys(pedidosAnual).forEach(group=>{\r\n                tempDatasets.push( {\r\n                    label: group, \r\n                    data:  Object.values(pedidosAnual[group].data), \r\n                    backgroundColor: pedidosAnual[group].color,\r\n                    fill: true,\r\n                    borderColor: pedidosAnual[group].color\r\n                })\r\n            })\r\n            setDatasets(tempDatasets)\r\n        }\r\n    }, [fetchingPedidosAnual])\r\n    return (\r\n        <>\r\n            {fetchingPedidosAnual && <LoadingComponent/>}\r\n            {!fetchingPedidosAnual && <Paper style={{\r\n                width: \"100%\", \r\n                background: \"white\", \r\n                padding: 20\r\n            }}>\r\n                {Object.keys(pedidosAnual).length === 0 && <Typography>Dados não disponíveis. Ainda não foi registado nenhum pedido.</Typography>   }\r\n                {Object.keys(pedidosAnual).length > 0 && <Bar\r\n                    width={100}\r\n                    height={25}\r\n                    data={{\r\n                        labels: [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"], \r\n                        datasets: datasets\r\n                    }}\r\n                    options={{\r\n                        tooltips:{\r\n                            enabled: true\r\n                        },\r\n                        elements: {\r\n                            point:{\r\n                                radius: 0\r\n                            }\r\n                        },\r\n                        responsive: true, \r\n                        \r\n                        chartArea: {\r\n                            backgroundColor: 'rgba(251, 85, 85, 0.4)'\r\n                        }, \r\n                        maintainAspectRatio: true,\r\n                        legend:{\r\n                            display: false, \r\n                            position: \"top\",\r\n                            align:\"center\",\r\n                            labels: {\r\n                                fontColor: \"white\",\r\n                            }\r\n                            \r\n                        },\r\n                       \r\n                        scales:{\r\n                            xAxes: [{\r\n                                display: true,\r\n                                gridLines: {\r\n                                    display: true,\r\n                                    color: \"#ecf0f1\"\r\n                                },\r\n                                scaleLabel: {\r\n                                    display: true,\r\n                                    labelString: `Ano de ${new Date().getFullYear()}`, \r\n                                    fontColor: \"#666\"\r\n                                },\r\n                                ticks:{\r\n                                    fontColor: \"#666\"\r\n                                }\r\n                            }],\r\n                            yAxes: [{\r\n                                display: true,\r\n                                gridLines: {\r\n                                    display: true,\r\n                                    color: \"#ecf0f1\"\r\n                                },\r\n                                stacked: true,\r\n                                scaleLabel: {\r\n                                    display: true,\r\n                                    labelString: 'Nº de Pedidos', \r\n                                    fontColor: \"#666\"\r\n                                },\r\n                                ticks:{\r\n                                    fontColor: \"#666\"\r\n                                } \r\n                            }]\r\n                        }\r\n                    }}\r\n                />}\r\n                \r\n            </Paper>}\r\n        </>\r\n    )\r\n}\r\nexport default AnualRequestesComponent\r\n\r\nconst LoadingComponent = ()=>{\r\n    return  <Skeleton variant=\"rect\" width=\"100%\" height={300} />\r\n           \r\n}","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Dashboard\\StatsComponent.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Dashboard\\EmpresasComponent.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Pedidos\\SearchPedidosComponent.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\PedidosFormPage\\PedidosForm.jsx",["172","173","174","175"],"import React from 'react'\r\nimport {useParams, Link} from \"react-router-dom\"\r\nimport FormComponent from \"../../Components/FormComponent\"\r\nimport {List , ListItem,FormHelperText, CircularProgress,Button,ListItemText,ListItemSecondaryAction, TextField,  MenuItem, Typography, InputAdornment , IconButton,InputLabel, Input, FormControl, Popover} from \"@material-ui/core\"\r\nimport RubricasComponent from \"./RubricasComponent\"\r\nimport Loading from \"../../Components/Loading\"\r\nimport {useGetGrupos, useGetEmpresasByRubrica} from \"../../Domain/useCases\"\r\nimport SearchArticle from \"./SearchArticle\"\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport SubmitForm from \"./SubmitForm\"\r\nimport {useSendPedidos, useGetPedidoByID, useEditPedido, useGetRubricasByEmppresa} from \"../../Domain/useCases\"\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\n\r\nconst getFormatedNumber = (number)=> String(number).length === 1 ? `0${number}`: number \r\n\r\nconst PedidosForm = () => {\r\n    let { id } = useParams();\r\n    const [selectedRubrica, setSelectedRubrica] = React.useState(\"PM\")\r\n    const [fetchEmpresas, setFetchEmpresas] = React.useState(true)\r\n    const [empresasList, setEmpresasList] = React.useState([])\r\n\r\n    const {\r\n        data: grupos, \r\n        isFetching: fetchingGrupos\r\n    } = useGetGrupos()\r\n\r\n    const {\r\n        data: pedido, \r\n        isFetching: fetchingPedido\r\n    } = useGetPedidoByID(id)\r\n\r\n    const date = new Date()\r\n    const today = `${date.getFullYear()}-${getFormatedNumber(date.getMonth()+1)}-${getFormatedNumber(date.getDate())}`\r\n    const [articlesResult, setArticlesResult] = React.useState([])\r\n    const [articleSearchTerm, setArticlesSearchTerm] = React.useState([])\r\n    const [performSearch, setPerformSearch] = React.useState(false)\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [submitForm, setSubmitForm] = React.useState(false);\r\n    const [tempArticle, setTempArticle] = React.useState({\r\n        artigo: \"\", \r\n        preco: 0, \r\n        quantidade: 0, \r\n        referencia_artigo: \"\", \r\n        faturado: false,\r\n        entrega: {\r\n            chegada: false, \r\n            data_chegada: \"\", \r\n            guia: \"\", \r\n            quantidade_chegada: 0\r\n        }\r\n    });\r\n    const [tempFatura, setTempFatura] = React.useState({\r\n        name: \"\", \r\n        data_emissao: today, \r\n        notas: \"\", \r\n        valor_fatura: 0, \r\n       \r\n    });\r\n\r\n    const [submitData, setSubmitData] = React.useState({})\r\n    \r\n    const [error, setError] = React.useState({\r\n        data_pedido: false, \r\n        remetente: false,\r\n        empresa: false,\r\n        ne: false,\r\n        proposta: false,\r\n        artigos: false\r\n    })\r\n    \r\n    const onChangeInput = (e)=>{\r\n        setSubmitData({\r\n            ...submitData,\r\n            [e.target.id]: e.target.value\r\n        })\r\n        setError({\r\n            ...error, \r\n            [e.target.id]: false\r\n        })\r\n    }\r\n\r\n    const onChangeInputArticle = e=>{\r\n        setTempArticle({\r\n            ...tempArticle,\r\n            [e.target.id]: e.target.value\r\n        })\r\n        setError({\r\n            ...error, \r\n            artigos: false\r\n        })\r\n    }\r\n\r\n    const onChangeInputFatura = e=>{\r\n        setTempFatura({\r\n            ...tempFatura,\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    const onSubmitForm = ()=>{\r\n        let tempError = {}\r\n        Object.keys(error).forEach(key=>{\r\n            if(key!== \"artigos\" && submitData[key] === \"\"){\r\n                tempError={\r\n                    ...tempError,\r\n                    [key]: true\r\n                }\r\n            }\r\n            else if (key === \"artigos\" && submitData.artigos.length === 0){\r\n                tempError={\r\n                    ...tempError,\r\n                    [key]: true\r\n                }\r\n            }            \r\n        })\r\n        setError({\r\n            ...error, \r\n            ...tempError\r\n        })\r\n        if(Object.values(tempError).length === 0){\r\n            setSubmitForm(true)\r\n        }\r\n        \r\n    }\r\n\r\n    const isLoading = React.useMemo(() => {\r\n        return  fetchingGrupos \r\n            || fetchingPedido\r\n    }, [fetchingGrupos, \r\n        fetchingPedido,\r\n    ])\r\n\r\n    React.useEffect(()=>{\r\n        if(!isLoading){\r\n                setSubmitData({\r\n                    rubrica:id?  pedido.data.rubrica: {\r\n                            code: \"PM\", \r\n                            icon: \"widget\",\r\n                            name: \"Materiais\"\r\n                    },\r\n                    data_pedido:id?  pedido.data.data_pedido : Date.now(),\r\n                    data_pedido_formated:id?  pedido.data.data_pedido_formated: today,\r\n                    day:id?  pedido.data.day :  date.getDate(),\r\n                    mounth:id?  pedido.data.mounth: date.getMonth()+1,\r\n                    year:id?  pedido.data.year : date.getFullYear(),\r\n                    remetente: id? pedido.data.remetente : \"\",\r\n                    grupo:id?  pedido.data.grupo : grupos.data[0].name,\r\n                    grupo_abrv:id?  pedido.data.grupo_abrv : grupos.data[0].abrv,\r\n                    grupo_id :id?  pedido.data.grupo_id : grupos.data[0].id,\r\n                    responsavel:id?  pedido.data.responsavel :  grupos.data[0].membros[0],\r\n                    empresa: id? pedido.data.empresa : empresasList.length > 0? empresasList[0].empresas: \"\",\r\n                    ne: id?  pedido.data.ne : empresasList.length > 0? empresasList.filter(n=>n.empresa===empresasList[0].empresas)[0].ne: \"\",\r\n                    cabimento: id? pedido.cabimento: empresasList.length > 0? empresasList.filter(n=>n.empresa===empresasList[0].empresas)[0].cabimento: \"\",\r\n                    proposta:id?  pedido.data.proposta : \"\",\r\n                    notas:id?  pedido.data.notas: \"\",\r\n                    valor_total:id?  pedido.data.valor_total: \"\",\r\n                    artigos:id?  pedido.data.artigos : [],\r\n                    faturas:id?  pedido.data.faturas : [],\r\n                })\r\n                if(id){\r\n                    setSelectedRubrica(pedido.data.rubrica.code)\r\n                }\r\n        }\r\n    }, [isLoading])\r\n\r\n\r\n    if((isLoading || Object.keys(submitData).length=== 0)) return <Loading msg=\"A carregar dados necessários...\" />\r\n    if(submitForm)  return <SubmitForm data={submitData}  id={id} submitFunction={id? useEditPedido: useSendPedidos}/>\r\n    return (\r\n        <FormComponent title={id? \"Editar Pedido\": \"Registo de Novo Pedido\"}>\r\n            <div style={{display: \"flex\"}}>\r\n                <RubricasComponent \r\n                        submitData={submitData}\r\n                        setSubmitData={setSubmitData}\r\n                        setSelectedRubrica={setSelectedRubrica}\r\n                        setFetchEmpresas={setFetchEmpresas}\r\n                    />\r\n\r\n                    {fetchEmpresas && <FetchEmpresasByRubrica \r\n                        setFetchEmpresas={setFetchEmpresas}\r\n                        setSubmitData={setSubmitData}\r\n                        submitData={submitData}\r\n                        selectedRubrica={selectedRubrica}\r\n                        setEmpresasList={setEmpresasList}\r\n                    />}\r\n            </div>\r\n            {empresasList.length === 0 && <Typography style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    marginBottom: 30\r\n                }} color=\"error\">\r\n                    <ErrorIcon/>\r\n                    Não existem notas de encomenda para a rúbirca selecionada    \r\n                </Typography>}\r\n            \r\n           <TextField\r\n                id=\"data_pedido\"\r\n                label=\"Data do Pedido\"\r\n                type=\"date\"\r\n                error={error.data_pedido}\r\n                required\r\n                variant=\"filled\"\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n                value={submitData.data_pedido_formated}\r\n                onChange={(e)=>{\r\n                    const selectedDate = new Date(e.target.value)\r\n                    setSubmitData({\r\n                        ...submitData,\r\n                        data_pedido_formated: e.target.value,\r\n                        data_pedido: selectedDate.getTime(), \r\n                        day: selectedDate.getDate(), \r\n                        mounth: selectedDate.getMonth()+1,\r\n                        year: selectedDate.getFullYear(),\r\n                    })\r\n                }}\r\n            />\r\n\r\n            <TextField\r\n                error={error.remetente}\r\n                required\r\n                id=\"remetente\"\r\n                label=\"Remetente\"\r\n                value={submitData.remetente}\r\n                onChange={onChangeInput}\r\n                variant=\"filled\"\r\n            />\r\n            <TextField\r\n                id=\"grupo\"\r\n                variant=\"filled\"\r\n                select\r\n                label=\"Grupo\"\r\n                value={submitData.grupo}\r\n                onChange={(e)=>{\r\n                    setSubmitData({\r\n                        ...submitData, \r\n                        grupo: e.target.value,\r\n                        grupo_abrv: grupos.data.filter(g=>g.name===e.target.value)[0].abrv,\r\n                        grupo_id: grupos.data.filter(g=>g.name===e.target.value)[0].id,\r\n                        responsavel: grupos.data.filter(g=>g.name===e.target.value)[0].membros[0],\r\n                    })\r\n                }}\r\n            >\r\n                {grupos.data.map(g=>{\r\n                    return (\r\n                        <MenuItem  key={g.name} value={g.name}>\r\n                            {g.name}\r\n                        </MenuItem>\r\n                    )\r\n                })}\r\n            </TextField>\r\n            \r\n            {submitData.grupo && <TextField\r\n                id=\"responsavel\"\r\n                variant=\"filled\"\r\n                select\r\n                label=\"Responsável\"\r\n                value={submitData.responsavel}\r\n                onChange={(e)=>{\r\n                    setSubmitData({\r\n                        ...submitData, \r\n                        responsavel: e.target.value\r\n                    })\r\n                }}\r\n            >\r\n                {grupos.data.filter(g=>g.name===submitData.grupo)[0].membros.map(m=>{\r\n                    return (\r\n                        <MenuItem key={m} value={m}>\r\n                            {m}\r\n                        </MenuItem>\r\n                    )\r\n                })}\r\n            </TextField>}\r\n            \r\n            <TextField\r\n                variant=\"filled\"\r\n                id=\"empresa\"\r\n                required\r\n                error={error.empresa}\r\n                select\r\n                disabled={empresasList.length === 0}\r\n                label=\"Empresa\"\r\n                value={submitData.empresa}\r\n                onChange={(e)=>{\r\n                    setSubmitData({\r\n                        ...submitData, \r\n                        empresa: e.target.value, \r\n                        empresa_id:  empresasList.filter(n=>n.empresa===e.target.value)[0].id,\r\n                        ne: empresasList.filter(n=>n.empresa===e.target.value)[0].ne,\r\n                        cabimento: empresasList.filter(n=>n.empresa===e.target.value)[0].cabimento\r\n                    })\r\n                }}\r\n            >\r\n                {empresasList.map(e=>{\r\n                    return (\r\n                        <MenuItem key={e.empresa} value={e.empresa}>\r\n                            {e.empresa}\r\n                        </MenuItem>\r\n                    )\r\n                    \r\n                })}\r\n            </TextField>\r\n           \r\n             <TextField\r\n                variant=\"filled\"\r\n                id=\"ne\"\r\n                required\r\n                disabled={empresasList.length === 0}\r\n                select\r\n                label=\"Nota de Encomenda\"\r\n                value={submitData.ne}\r\n                helperText={submitData.ne!== \"\" ? `Cabimento: ${submitData.cabimento}`: \"\"}\r\n                onChange={(evt, name)=>{\r\n                    setSubmitData({\r\n                        ...submitData, \r\n                        ne: evt.target.value,\r\n                        cabimento: name.props.name\r\n                    })\r\n                }}\r\n            >\r\n                {empresasList.filter(n=>n.empresa===submitData.empresa).map(n =>{\r\n                    \r\n                    return (\r\n                        <MenuItem name={n.cabimento} key={n.id} value={n.ne}>\r\n                            {n.ne}\r\n                        </MenuItem>\r\n                    )\r\n                })}\r\n            </TextField>\r\n\r\n            <TextField\r\n                required\r\n                error={error.proposta}\r\n                id=\"proposta\"\r\n                label=\"Proposta\"\r\n                value={submitData.proposta}\r\n                onChange={onChangeInput}\r\n                variant=\"filled\"\r\n            />\r\n            \r\n            <TextField\r\n                id=\"notas\"\r\n                label=\"Notas\"\r\n                value={submitData.notas}\r\n                onChange={onChangeInput}\r\n                multiline\r\n                rows={4}\r\n                variant=\"filled\"\r\n            />\r\n\r\n            <div className=\"formTitleContainer\">\r\n                <Typography color=\"primary\" >Adicionar Artigos</Typography>\r\n            </div>\r\n\r\n            <FormControl \r\n                variant=\"outlined\"\r\n                error={error.artigos}\r\n                style={{\r\n                    marginBottom: 40\r\n                }}\r\n            > \r\n                <InputLabel htmlFor=\"standard-adornment-password\">Pesquisar referência do artigo</InputLabel>\r\n                <Input\r\n                    id=\"articleSearch\"\r\n                    value={articleSearchTerm}\r\n                    onChange={(e)=>{\r\n                        setArticlesSearchTerm(e.target.value)\r\n                    }}\r\n                    style={{padding: \"0px 0px 0px 15px\"}}\r\n                    endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                        <SearchArticle \r\n                            term={articleSearchTerm}\r\n                            setArticlesResult={setArticlesResult}\r\n                            performSearch={performSearch}\r\n                            setPerformSearch={setPerformSearch}\r\n                        />\r\n                       <IconButton disabled={performSearch} onClick={(e)=>{\r\n                            if(articleSearchTerm !== \"\" ) {\r\n                                setPerformSearch(true)\r\n                                setAnchorEl(e.target)\r\n                            }\r\n                           }\r\n                       } color=\"primary\">\r\n                          <SearchIcon/>\r\n                        </IconButton>\r\n                    </InputAdornment>\r\n                    }\r\n                    />\r\n                    {tempArticle.artigo!== \"\" && <FormHelperText>Artigo: {tempArticle.artigo}</FormHelperText>}\r\n                </FormControl>\r\n                <Popover \r\n                    id={id}\r\n                    open={Boolean(anchorEl)}\r\n                    anchorEl={anchorEl}\r\n                    onClose={()=>setAnchorEl(null)}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                      }}\r\n                    transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                    }}\r\n                >\r\n                    <div className=\"formSearchResultContainer\">\r\n                        {performSearch && <CircularProgress />}\r\n                        {!performSearch&& articlesResult.length > 0 &&  <List dense={true}>\r\n                            {articlesResult.map(a=>{\r\n                                return (\r\n                                    <ListItem button key={a.id} onClick={()=>{\r\n                                        setAnchorEl(null)\r\n                                        setArticlesSearchTerm(a.code)\r\n                                        setTempArticle({\r\n                                            ...tempArticle,\r\n                                            artigo: a.name,\r\n                                            referencia_artigo: a.code, \r\n                                        })\r\n                                        \r\n                                    }}>\r\n                                        <ListItemText primary={a.name} secondary={a.code} />\r\n                                    </ListItem>\r\n                                )\r\n                            })}\r\n                            \r\n                            </List>\r\n                        }\r\n                        {!performSearch&& articlesResult.length === 0 && <Typography style={{\r\n                            padding: 20\r\n                        }}>\r\n                            O artigo não se encontra na base de dados. <Button color=\"primary\">adicionar artigo</Button>    \r\n                        </Typography>}\r\n                    </div>\r\n                </Popover>\r\n                \r\n                <TextField\r\n                    id=\"quantidade\"\r\n                    label=\"Quantidade\"\r\n                    value={tempArticle.quantidade}\r\n                    onChange={onChangeInputArticle}\r\n                    variant=\"filled\"\r\n                    type=\"number\"\r\n                />\r\n                <TextField\r\n                    id=\"preco\"\r\n                    label=\"Preço\"\r\n                    type=\"number\"\r\n                    value={tempArticle.preco}\r\n                    onChange={onChangeInputArticle}\r\n                    variant=\"filled\"\r\n                />\r\n                <Button disabled={tempArticle.artigo === \"\" || tempArticle.quantidade === 0 || tempArticle.preco === 0} onClick={()=>{\r\n                    if(tempArticle.quantidade !== 0 && tempArticle.preco !== 0){\r\n                        let tempArtigo = submitData.artigos\r\n                        tempArtigo.push(tempArticle)\r\n                        setSubmitData({\r\n                            ...submitData,\r\n                            artigos: tempArtigo,\r\n                            valor_total: submitData.valor_total + (tempArticle.quantidade * tempArticle.preco)\r\n                        })\r\n                        setTempArticle({\r\n                            artigo: \"\", \r\n                            preco: 0, \r\n                            quantidade: 0, \r\n                            referencia_artigo: \"\", \r\n                            faturado: false,\r\n                            entrega: {\r\n                                chegada: false, \r\n                                data_chegada: \"\", \r\n                                guia: \"\", \r\n                                quantidade_chegada: 0\r\n                            }\r\n                        })\r\n                        setArticlesSearchTerm(\"\")\r\n\r\n                    }\r\n                }} variant=\"contained\" fullWidth>adicionar artigo</Button>\r\n            <List dense={true}>\r\n                {\r\n                    submitData.artigos.map((a, index)=>{\r\n                        return (\r\n                            <ListItem style={{\r\n                                background: \"#D1E9FF\"\r\n                            }} key={\"artigo_\" + a.id}>\r\n                                    <ListItemText primary={`${a.quantidade} unidade(s) de ${a.artigo}`} secondary={`${a.referencia_artigo} -  ${a.preco*a.quantidade} €`} />\r\n                                    <ListItemSecondaryAction>\r\n                                        <IconButton onClick={()=>{\r\n                                                let tempArtigo = submitData.artigos\r\n                                                tempArtigo.splice(index,1)\r\n                                                setSubmitData({\r\n                                   \r\n                                                    ...submitData,\r\n                                                    artigos: tempArtigo,\r\n                                                    valor_total: submitData.valor_total - (a.preco*a.quantidade)\r\n                                                })\r\n                                        }} style={{color: \"#e74c3c\"}}>\r\n                                            <DeleteIcon/>\r\n                                        </IconButton>\r\n                                    </ListItemSecondaryAction>\r\n                            </ListItem>\r\n                        )\r\n                    })\r\n                }\r\n            </List>\r\n            <div className=\"formTitleContainer\">\r\n                <Typography color=\"primary\" >Adicionar Faturas</Typography>\r\n            </div>\r\n            <TextField\r\n                id=\"name\"\r\n                label=\"Código da Fatura\"\r\n                value={tempFatura.name}\r\n                onChange={onChangeInputFatura}\r\n                variant=\"filled\"\r\n            />\r\n            <TextField\r\n                id=\"data_emissao\"\r\n                label=\"Data de Emissão\"\r\n                value={tempFatura.data_emissao}\r\n                type=\"date\"\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n                onChange={(e)=>{\r\n                    const selectedDate = new Date(e.target.value)\r\n                    setTempFatura({\r\n                        ...tempFatura, \r\n                        data_emissao: selectedDate.toJSON,\r\n                        data_emissao_timestamp: selectedDate.getTime()\r\n                    })\r\n                }}\r\n                variant=\"filled\"\r\n            />\r\n            <TextField\r\n                id=\"valor_fatura\"\r\n                label=\"Valor\"\r\n                type=\"number\"\r\n                value={tempFatura.valor_fatura}\r\n                onChange={onChangeInputFatura}\r\n                variant=\"filled\"\r\n            />\r\n            <TextField\r\n                id=\"notas\"\r\n                multiline\r\n                rows={4}\r\n                label=\"Notas\"\r\n                value={tempFatura.notas}\r\n                onChange={onChangeInputFatura}\r\n                variant=\"filled\"\r\n            />\r\n            <Button\r\n                variant=\"contained\"\r\n                disabled={tempFatura.name===\"\" ||tempFatura.data_emissao=== \"\" || tempFatura.valor_fatura === 0 }\r\n                onClick={()=>{\r\n                    let tempFat = submitData.faturas\r\n                    tempFat.push(tempFatura)\r\n                    setSubmitData({\r\n                        ...submitData,\r\n                        faturas: tempFat\r\n                    })\r\n                    setTempFatura({\r\n                        name: \"\", \r\n                        data_emissao: \"\", \r\n                        valor_fatura: 0, \r\n                        notas: \"\", \r\n                    })\r\n                }}\r\n            >\r\n                adicionar fatura\r\n            </Button>\r\n            <List dense={true}>\r\n                {\r\n                    submitData.faturas.map((f, index)=>{\r\n                        return (\r\n                            <ListItem style={{\r\n                                background: \"#f8e6ff\"\r\n                            }} key={\"fatura_\" + index}>\r\n                                    <ListItemText primary={`${f.name} com o valor de ${f.valor_fatura}€`} secondary={`Emitida a ${f.data_emissao}`} />\r\n                                    <ListItemSecondaryAction>\r\n                                        <IconButton onClick={()=>{\r\n                                                let tempFat = submitData.fatura\r\n                                                tempFat.splice(index,1)\r\n                                                setSubmitData({\r\n                                                    ...submitData,\r\n                                                    faturas: tempFat\r\n                                                })\r\n                                        }} style={{color: \"#e74c3c\"}}>\r\n                                            <DeleteIcon/>\r\n                                        </IconButton>\r\n                                    </ListItemSecondaryAction>\r\n                            </ListItem>\r\n                        )\r\n                    })\r\n                }\r\n            </List>\r\n\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{\r\n                    marginTop: 30\r\n                }}\r\n                onClick={()=>onSubmitForm()}\r\n            >\r\n                registar pedido\r\n            </Button>\r\n        </FormComponent>\r\n\r\n       \r\n        \r\n    )\r\n}\r\n\r\nconst FetchEmpresasByRubrica = ({\r\n    setSubmitData,\r\n    submitData,\r\n    selectedRubrica,\r\n    setFetchEmpresas,\r\n    setEmpresasList\r\n})=>{\r\n    const {\r\n        data: empresas, \r\n        isFetching, \r\n    } = useGetEmpresasByRubrica(selectedRubrica)\r\n\r\n\r\n    React.useEffect(()=>{\r\n        if(!isFetching){     \r\n            setSubmitData({\r\n                ...submitData, \r\n                empresa: empresas.data.length > 0?empresas.data[0].empresa : \"\",\r\n                ne: empresas.data.length > 0? empresas.data[0].ne: \"\",\r\n                cabimento: empresas.data.length > 0? empresas.data[0].cabimento: \"\",\r\n            })\r\n            setFetchEmpresas(false)\r\n            setEmpresasList(empresas.data)\r\n        }\r\n    },[isFetching])\r\n    \r\n    console.log(empresas)\r\n    return <CircularProgress color=\"primary\" />\r\n}\r\n\r\nexport default  PedidosForm\r\n\r\n","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Components\\FormComponent.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\PedidosFormPage\\RubricasComponent.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Services\\GruposRepository.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Services\\ArtigosRepository.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\PedidosFormPage\\SearchArticle.jsx",["176","177"],"import React from 'react'\r\nimport {useGetArticle} from \"../../Domain/useCases\"\r\nconst SearchArticle = ({\r\n    term, \r\n    setArticlesResult, \r\n    performSearch, \r\n    setPerformSearch\r\n}) => {\r\n    const {\r\n        data: articles, \r\n        isFetching, \r\n        refetch\r\n    } = useGetArticle(term)\r\n    React.useEffect(()=>{\r\n        if(performSearch){\r\n            refetch()\r\n        }\r\n    },[performSearch])\r\n\r\n    React.useEffect(()=>{\r\n        if(!isFetching ){\r\n            setArticlesResult(articles.data)\r\n            setPerformSearch(false)\r\n        }\r\n    }, [isFetching])\r\n    return (\r\n        <>\r\n            {/* {performSearch && <CircularProgress size={20} color=\"primary\" />} */}\r\n        </>\r\n    )\r\n}\r\nexport default SearchArticle","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\PedidosFormPage\\SubmitForm.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Saldos\\RubricasComponent.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Saldos\\FaturasComponent.jsx",["178"],"import React from 'react'\r\nimport {useGetFaturasByEmppresa} from \"../../Domain/useCases\"\r\nimport {CircularProgress, Button,Table, TableHead, TableRow, TableBody, TableCell, Typography, Tooltip, IconButton} from \"@material-ui/core\"\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nconst FaturasComponent = ({empresa}) => {\r\n    const {\r\n        data: faturas, \r\n        isFetching\r\n    } = useGetFaturasByEmppresa(empresa)\r\n\r\n    console.log(faturas)\r\n    return (\r\n        <div className=\"optionsContainer\">\r\n            {isFetching && <CircularProgress size={60} style={{color: \"white\"}} />}\r\n            {!isFetching && <Table size=\"medium\">\r\n                <TableHead> \r\n                    <TableRow>\r\n                        <TableCell >Código da Fatura</TableCell>\r\n                        <TableCell >Data de Emissão</TableCell>\r\n                        <TableCell >Pedido</TableCell>\r\n                        <TableCell >Valor</TableCell>\r\n                        <TableCell >Notas</TableCell>\r\n                        <TableCell></TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {faturas.data.map(f => {\r\n                        return (\r\n                        <TableRow>\r\n                            <TableCell  >{f.codigo_fatura}</TableCell>\r\n                            <TableCell >{f.data_emissao.slice(0,11)}</TableCell>\r\n                            <TableCell >\r\n                                <Button color=\"primary\">ver pedido</Button>\r\n                            </TableCell>\r\n                            <TableCell >{f.valor}</TableCell>\r\n                            <TableCell>\r\n                                <Tooltip title=\"Ver notas\">\r\n                                    <IconButton color=\"primary\">\r\n                                        <CommentIcon/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </TableCell>\r\n                        <TableCell>\r\n                            <Tooltip title=\"Apagar fatura\">\r\n                                <IconButton style={{color: \"#e74c3c\"}}>\r\n                                    <DeleteIcon />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    )})}\r\n                </TableBody>\r\n            </Table>}\r\n        </div>\r\n    )\r\n}\r\nexport default FaturasComponent","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\ArtigosPage\\ArtigosComponent.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Pedidos\\PerformSearch.jsx",["179"],"import React from 'react'\r\nimport {CircularProgress, IconButton, Snackbar } from \"@material-ui/core\"\r\nimport {useSearchPedidos} from \"../../Domain/useCases\"\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\n const PerformSearch = ({\r\n    word,\r\n    field,\r\n    setSubmitSearch,\r\n    setPedidosList, \r\n    refetch\r\n}) => {\r\n    const {\r\n        data: pedidos, \r\n        isFetching\r\n    } = useSearchPedidos(word, field)\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    React.useEffect(()=>{\r\n        if(!isFetching){\r\n            if(pedidos.data.length > 0){\r\n                setPedidosList(pedidos)\r\n            }else{\r\n                setOpen(true)\r\n            }\r\n        }\r\n    }, [isFetching])\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        } \r\n        setOpen(false);\r\n        setSubmitSearch(false)\r\n    };\r\n\r\n    if(isFetching) return <CircularProgress size={40} />\r\n\r\n    return (<>\r\n        <IconButton onClick={()=>{\r\n            refetch()\r\n            setSubmitSearch(false)\r\n        }}>\r\n        <CloseIcon />\r\n        </IconButton>\r\n        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"warning\">\r\n            Não foi encontrado nenhum pedido com o termo pesquisado\r\n            </Alert>\r\n      </Snackbar>\r\n    </>\r\n    )\r\n}\r\nexport default PerformSearch\r\n\r\nconst Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\Pedidos\\DeletePedidoComponent.jsx",["180"],"import React from 'react'\r\nimport {useDeletePedido} from \"../../Domain/useCases\"\r\nimport {CircularProgress} from \"@material-ui/core\"\r\n\r\n const DeletePedidoComponent = ({ \r\n    id,\r\n    setDeleteResult\r\n }) => {\r\n\r\n    const {\r\n        data: result, \r\n        isFetching \r\n    } = useDeletePedido(id)\r\n    React.useEffect(()=>{\r\n        if(!isFetching){\r\n            setDeleteResult(result)\r\n        }\r\n    }, [isFetching])\r\n    \r\n    if(isFetching) return (<CircularProgress />)\r\n    return <></>\r\n}\r\nexport default DeletePedidoComponent\r\n\r\n","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\GerirGrupos\\GerirGruposPage.jsx",["181","182","183"],"import React from 'react'\r\nimport {useGetGrupos, useGetDistAnual} from \"../../Domain/useCases\"\r\nimport Loading from \"../../Components/Loading\"\r\nimport {Button,   DialogTitle,Dialog,DialogActions, Snackbar, DialogContent,DialogContentText,  Paper,MenuItem,Menu, Tooltip,Typography, IconButton, List, ListItem,Collapse, ListItemText, ListItemIcon} from \"@material-ui/core\"\r\nimport {Link} from \"react-router-dom\"\r\nimport GroupWorkIcon from '@material-ui/icons/GroupWork';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {Bar} from \"react-chartjs-2\"\r\nimport MembersComponent from \"./MembersComponent\"\r\nimport DeleteGroup from \"./DeleteGrupoComponent\"\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nconst GerirGruposPage = () => {\r\n    const [collapse, setCollapse]=React.useState(null)\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [selectedGroup, setSelectedGroup] = React.useState(null);\r\n    const [datasets, setDatasets] = React.useState(null)\r\n    const [deleteGrupo, setDeleteGrupo] = React.useState(false);\r\n    const [openDelete, setOpenDelete] = React.useState(false);\r\n    const [deleteResult, setDeleteResult] = React.useState(null);\r\n    const [selectedYear, setSelectedYear] = React.useState(2021);\r\n    \r\n    \r\n    const {\r\n        data: distAnual, \r\n        isFetching: fetchingDistAnual,\r\n        refetch: refetchDist\r\n    } = useGetDistAnual(selectedYear)\r\n\r\n\r\n    const {\r\n        data: grupos, \r\n        isFetching: fetchingGrupos,\r\n        refetch\r\n    } = useGetGrupos()\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        } \r\n        refetch()\r\n        setOpenDelete(false)\r\n    };\r\n\r\n    const isLoading = React.useMemo(() => {\r\n        return  fetchingGrupos\r\n        || fetchingDistAnual\r\n    }, [fetchingGrupos, fetchingDistAnual])\r\n\r\n    console.log(distAnual)\r\n    \r\n    React.useEffect(()=>{\r\n        let tempAnualDatasets=[]\r\n        if(!isLoading){\r\n            distAnual.data.forEach(d=>{\r\n                 let orderedDataAnual= []\r\n                 const grupoColor = grupos.data.filter(g=>g.abrv === d.grupo)[0].color\r\n                 console.log(grupoColor)\r\n                for (let i = 1; i< 13; i++){\r\n                    orderedDataAnual.push(Number(d.anual[`m${i}`]))\r\n                }\r\n                tempAnualDatasets.push( {\r\n                    label: d.grupo, \r\n                    data:  orderedDataAnual, \r\n                    backgroundColor: grupoColor,\r\n                    fill: true,\r\n                    borderColor: grupoColor\r\n                })\r\n            })\r\n          \r\n            setDatasets(tempAnualDatasets)\r\n        }\r\n    }, [isLoading])\r\n    \r\n    if(isLoading) return <Loading msg=\"A carregar dados relacionados com os grupos de investigação...\" />\r\n    return (\r\n        <div className=\"gerirGruposContainer\">\r\n            {grupos.data.length === 0 && <Paper style={{\r\n            padding: \"10px 20px\",\r\n            width: \"100%\",\r\n            marginTop: 50\r\n        }}>\r\n            <Typography>Sem grupos para apresentar. <Button component={Link} to=\"/novoGrupo\" color=\"primary\">adicionar grupo</Button></Typography>    \r\n        </Paper>}\r\n            {grupos.data.length > 0 && <>\r\n                <Dialog onClose={()=>{\r\n                 setOpenDelete(false)\r\n                 setDeleteResult(null)\r\n                 setDeleteGrupo(false)\r\n                 refetch()\r\n            }} aria-labelledby=\"simple-dialog-title\" open={openDelete}>\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Tem a certeza que pretende apagar o grupo selecionado\"}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        O grupo será apagado permanentemente da base de dados. Tem a certeza que pretende continuar?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {!deleteGrupo && <Button style={{color: \"#e74c3c\"}}onClick={()=>{setDeleteGrupo(true)}}>\r\n                        apagar\r\n                    </Button>}\r\n                    {deleteGrupo && <DeleteGroup\r\n                        id={selectedGroup} \r\n                        setDeleteGrupo={setDeleteGrupo}\r\n                        setDeleteResult={setDeleteResult}/>}\r\n                    <Button onClick={()=>setOpenDelete(false)} autoFocus>\r\n                        cancelar\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n             <div className=\"titleContainer\">\r\n                <Typography variant=\"h6\" color=\"primary\" >Gestão de Grupos de Investigação</Typography>\r\n                <Button component={Link} to=\"/novoGrupo\" variant=\"contained\" color=\"primary\" >adicionar grupo</Button>\r\n            </div>\r\n            <Paper className=\"dataContainer\">\r\n                <div className=\"exportContainer\">\r\n                    <Tooltip title=\"Export data to excel\">\r\n                        <IconButton>\r\n                            <MoreVertIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </div>\r\n                <div className=\"graphContainer\">\r\n                    <Bar\r\n                        width={100}\r\n                        height={25}\r\n                        data={{\r\n                            labels: [\"Jan\", \"Fev\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Ag\", \"Set\", \"Out\", \"Nov\", \"Dez\"], \r\n                            datasets: datasets\r\n                        }}\r\n                        options={{\r\n                            tooltips:{\r\n                                enabled: true\r\n                            },\r\n                            elements: {\r\n                                point:{\r\n                                    radius: 0\r\n                                }\r\n                            },\r\n                            responsive: true, \r\n                            \r\n                            chartArea: {\r\n                                backgroundColor: 'rgba(251, 85, 85, 0.4)'\r\n                            }, \r\n                            maintainAspectRatio: true,\r\n                            legend:{\r\n                                display: false, \r\n                                position: \"top\",\r\n                                align:\"center\",\r\n                                labels: {\r\n                                    fontColor: \"white\",\r\n                                }\r\n                                \r\n                            },\r\n                        \r\n                            scales:{\r\n                                xAxes: [{\r\n                                    display: true,\r\n                                    gridLines: {\r\n                                        display: true,\r\n                                        color: \"#ecf0f1\"\r\n                                    },\r\n                                    scaleLabel: {\r\n                                        display: true,\r\n                                        labelString: `Ano de ${new Date().getFullYear()}`, \r\n                                        fontColor: \"#666\"\r\n                                    },\r\n                                    ticks:{\r\n                                        fontColor: \"#666\"\r\n                                    },\r\n                                    // stacked: true,\r\n                                }],\r\n                                yAxes: [{\r\n                                    display: true,\r\n                                    gridLines: {\r\n                                        display: true,\r\n                                        color: \"#ecf0f1\"\r\n                                    },\r\n                                    \r\n                                    scaleLabel: {\r\n                                        display: true,\r\n                                        labelString: 'Montante gasto (€)', \r\n                                        fontColor: \"#666\"\r\n                                    },\r\n                                    ticks:{\r\n                                        fontColor: \"#666\"\r\n                                    } \r\n                                }]\r\n                            }\r\n                        }}\r\n                    />\r\n                </div>\r\n            </Paper>\r\n            <List\r\n                component={Paper}\r\n                style={{paddingBottom: 0}}\r\n            >\r\n            {grupos.data.map(g=>{\r\n                return(<>\r\n                    <ListItem  key={g.id}>\r\n                        <ListItemIcon>\r\n                            <GroupWorkIcon style={{fontSize: 40,color: g.color}} />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={g.name} secondary={g.abrv} />\r\n                        <IconButton onClick={(e)=>{\r\n                            setSelectedGroup(g.id)\r\n                            setAnchorEl(e.target)\r\n                        }}>\r\n                            <MoreVertIcon/>\r\n                        </IconButton>\r\n                        {/* {collapse===g.id ? <ExpandLess /> : <ExpandMore />} */}\r\n                    </ListItem>\r\n                    <Collapse key={\"col_\"+g.id} in={collapse===g.id} timeout=\"auto\" unmountOnExit>\r\n                        <MembersComponent selectedYear={2021} setCollapse={setCollapse} id={g.id} />\r\n                    </Collapse>\r\n                </>)\r\n                })\r\n            }\r\n            </List>\r\n            <Menu\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={()=>setAnchorEl(null)}\r\n            >\r\n                <MenuItem componente={Button} onClick={()=>{\r\n                    setAnchorEl(null)\r\n                    setCollapse(selectedGroup)    \r\n                }}>DETALHES</MenuItem>\r\n                <MenuItem componente={Link} to={`/editGrupo/${selectedGroup}`} onClick={()=>setAnchorEl(null)}>EDITAR</MenuItem>\r\n                <MenuItem componente={Button} onClick={()=>{\r\n                    setAnchorEl(null)\r\n                    setOpenDelete(true)\r\n                }}>ELIMINAR</MenuItem>\r\n            </Menu>\r\n            {Boolean(deleteResult) && <Snackbar open={true} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity={deleteResult.error? \"error\": \"success\"}>\r\n                    {deleteResult.error? deleteResult.msg: \"O grupo foi eliminado com sucesso!\"}\r\n                </Alert>\r\n            </Snackbar>}\r\n\r\n            </>}\r\n        </div>\r\n    )\r\n}\r\nexport default GerirGruposPage\r\n\r\nconst Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\AddGroup\\AddGroup.jsx",["184","185"],"import React from 'react'\r\nimport {useParams, Link} from \"react-router-dom\"\r\nimport FormComponent from \"../../Components/FormComponent\"\r\nimport {List , ListItem,Button,ListItemText,ListItemSecondaryAction, TextField,  Typography, IconButton,  Popover, ListItemIcon} from \"@material-ui/core\"\r\nimport Loading from \"../../Components/Loading\"\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport SubmitForm from \"./SubmitForm\"\r\nimport {useNovoGrupo, useGetGrupoByID, useEditGrupo} from \"../../Domain/useCases\"\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport ColorPicker, { useColor } from \"react-color-palette\";\r\nimport ColorLensIcon from '@material-ui/icons/ColorLens';\r\nconst AddGroup = () => {\r\n    let { id } = useParams();\r\n    \r\n    const {\r\n        data: grupo, \r\n        isFetching\r\n    } = useGetGrupoByID(id)\r\n\r\n    const [color, setColor] = useColor(\"hex\", \"#121212\");\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [submitForm, setSubmitForm] = React.useState(false);\r\n    const [tempMembro, setTempMembro] = React.useState(\"\");\r\n    const [submitData, setSubmitData] = React.useState({\r\n        name: \"\",\r\n        abrv: \"\", \r\n        color: \"\", \r\n        membros: []\r\n    })\r\n    const [error, setError] = React.useState({\r\n        name: false,\r\n        abrv: false, \r\n        color: false, \r\n        membros: false\r\n    })\r\n    \r\n    const onChangeInput = (e)=>{\r\n        setSubmitData({\r\n            ...submitData,\r\n            [e.target.id]: e.target.value\r\n        })\r\n        setError({\r\n            ...error, \r\n            [e.target.id]: false\r\n        })\r\n    }\r\n    const onSubmitForm = ()=>{\r\n        let tempError = {}\r\n        Object.keys(error).forEach(key=>{\r\n            if(key!== \"membros\" && submitData[key] === \"\"){\r\n                tempError={\r\n                    ...tempError,\r\n                    [key]: true\r\n                }\r\n            }\r\n            else if (key === \"membros\" && submitData.membros.length === 0){\r\n                tempError={\r\n                    ...tempError,\r\n                    [key]: true\r\n                }\r\n            }            \r\n        })\r\n        setError({\r\n            ...error, \r\n            ...tempError\r\n        })\r\n        // console.log(Object.values(tempError))\r\n        if(Object.values(tempError).length === 0){\r\n            setSubmitForm(true)\r\n        }\r\n    }\r\n\r\n    React.useEffect(()=>{\r\n        if(!isFetching ){\r\n            if(id){\r\n                setSubmitData({\r\n                    name: grupo.data.name,\r\n                    abrv: grupo.data.abrv, \r\n                    color: grupo.data.color, \r\n                    membros: grupo.data.membros\r\n                })\r\n            }\r\n        }\r\n    }, [isFetching])\r\n\r\n\r\n\r\n    if(isFetching) return <Loading msg=\"A carregar dados do grupo\" />\r\n    if(submitForm)  return <SubmitForm data={submitData}  id={id} submitFunction={id? useEditGrupo: useNovoGrupo}/>\r\n    return (\r\n        <FormComponent title={id? `Editar o Grupo ${grupo.data.name}`: \"Registo de Novo Grupo\"}>\r\n            <TextField\r\n                error={error.name}\r\n                required\r\n                id=\"name\"\r\n                label=\"Nome do Grupo\"\r\n                value={submitData.name}\r\n                onChange={onChangeInput}\r\n                variant=\"filled\"\r\n            />\r\n           \r\n            <div style={{\r\n                width: \"100%\",\r\n                display: \"flex\",\r\n                alignItems: \"center\"\r\n            }}>\r\n                <IconButton style={{\r\n                    marginRight: 10,\r\n                    marginBottom: 20\r\n                }} onClick={(e)=>{\r\n                    setAnchorEl(e.target)\r\n                }}>\r\n                    <ColorLensIcon style={{color: color.hex}}/>\r\n                </IconButton>\r\n                <TextField\r\n                    fullWidth\r\n                    required\r\n                    error={error.abrv}\r\n                    id=\"abrv\"\r\n                    label=\"Abreviatura\"\r\n                    value={submitData.abrv}\r\n                    onChange={onChangeInput}\r\n                    variant=\"filled\"\r\n                />\r\n                \r\n            </div>\r\n            <Popover\r\n                open={Boolean(anchorEl)}\r\n                anchorEl={anchorEl}\r\n                onClose={()=>setAnchorEl(null)}\r\n                 anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                  }}\r\n                  transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'left',\r\n                  }}\r\n            >\r\n                <ColorPicker width={200} height={100} color={color} onChange={(c)=>{\r\n                    setSubmitData({\r\n                        ...submitData,\r\n                        color: c.hex\r\n                    })\r\n                    setColor(c)\r\n                    }} dark />\r\n\r\n            </Popover>\r\n            \r\n            <div className=\"formTitleContainer\">\r\n                <Typography color=\"primary\" >Adicionar Membro</Typography>\r\n            </div>\r\n            <TextField\r\n                id=\"name\"\r\n                label=\"Nome\"\r\n                value={tempMembro}\r\n                onChange={(e)=>{setTempMembro(e.target.value)}}\r\n                variant=\"filled\"\r\n            />\r\n           \r\n            <Button\r\n                variant=\"contained\"\r\n                disabled={tempMembro === \"\"}\r\n                onClick={()=>{\r\n                    let tmpM = submitData.membros\r\n                    tmpM.push(tempMembro)\r\n                    setSubmitData({\r\n                        ...submitData,\r\n                        membros: tmpM\r\n                    })\r\n                    setTempMembro(\"\")\r\n                }}\r\n            >\r\n                adicionar membro\r\n            </Button>\r\n            <List>\r\n                {\r\n                    submitData.membros.map((m, index)=>{\r\n                        return (\r\n                            <ListItem style={{\r\n                                background: \"#ecf0f1\"\r\n                            }} key={\"membro_\" + index}>\r\n                                <ListItemIcon>\r\n                                    <AccountCircleIcon color=\"primary\" />\r\n                                </ListItemIcon>\r\n                                    <ListItemText primary={m} />\r\n                                    <ListItemSecondaryAction>\r\n                                        <IconButton onClick={()=>{\r\n                                                let tempM = submitData.membros\r\n                                                tempM.splice(index,1)\r\n                                                setSubmitData({\r\n                                                    ...submitData,\r\n                                                    membros: tempM\r\n                                                })\r\n                                        }} style={{color: \"#e74c3c\"}}>\r\n                                            <DeleteIcon/>\r\n                                        </IconButton>\r\n                                    </ListItemSecondaryAction>\r\n                            </ListItem>\r\n                        )\r\n                    })\r\n                }\r\n            </List>\r\n\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{\r\n                    marginTop: 30\r\n                }}\r\n                onClick={()=>onSubmitForm()}\r\n            >\r\n                Submeter\r\n            </Button>\r\n        </FormComponent>\r\n\r\n    )\r\n}\r\nexport default AddGroup","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\AddGroup\\SubmitForm.jsx",[],"C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\GerirGrupos\\DeleteGrupoComponent.jsx",["186"],"import React from 'react'\r\nimport {useDeleteGrupo} from \"../../Domain/useCases\"\r\nimport { CircularProgress} from \"@material-ui/core\"\r\n\r\n const DeletePedidoComponent = ({\r\n    id,\r\n    setDeleteResult\r\n }) => {\r\n\r\n    const {\r\n        data: result, \r\n        isFetching \r\n    } = useDeleteGrupo(id)\r\n\r\n    React.useEffect(()=>{\r\n        if(!isFetching){\r\n            setDeleteResult(result)\r\n            setDeleteGrupo(false)\r\n        }\r\n    }, [isFetching])\r\n\r\n    if(isFetching) return (<CircularProgress />)\r\n    return (<></>)\r\n}\r\nexport default DeletePedidoComponent\r\n\r\n","C:\\Users\\danie\\Desktop\\gestaopedidos\\src\\Pages\\GerirGrupos\\MembersComponent.jsx",["187"],{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","severity":1,"message":"193","line":47,"column":9,"nodeType":"194","endLine":47,"endColumn":11,"suggestions":"195"},{"ruleId":"196","severity":1,"message":"197","line":10,"column":41,"nodeType":"198","messageId":"199","endLine":10,"endColumn":52},{"ruleId":"196","severity":1,"message":"200","line":2,"column":53,"nodeType":"198","messageId":"199","endLine":2,"endColumn":59},{"ruleId":"192","severity":1,"message":"201","line":73,"column":8,"nodeType":"194","endLine":73,"endColumn":25,"suggestions":"202"},{"ruleId":"196","severity":1,"message":"203","line":14,"column":11,"nodeType":"198","messageId":"199","endLine":14,"endColumn":20},{"ruleId":"192","severity":1,"message":"204","line":32,"column":8,"nodeType":"194","endLine":32,"endColumn":30,"suggestions":"205"},{"ruleId":"196","severity":1,"message":"206","line":2,"column":20,"nodeType":"198","messageId":"199","endLine":2,"endColumn":24},{"ruleId":"196","severity":1,"message":"207","line":12,"column":58,"nodeType":"198","messageId":"199","endLine":12,"endColumn":82},{"ruleId":"192","severity":1,"message":"208","line":165,"column":8,"nodeType":"194","endLine":165,"endColumn":19,"suggestions":"209"},{"ruleId":"192","severity":1,"message":"210","line":639,"column":7,"nodeType":"194","endLine":639,"endColumn":19,"suggestions":"211"},{"ruleId":"192","severity":1,"message":"212","line":18,"column":7,"nodeType":"194","endLine":18,"endColumn":22,"suggestions":"213"},{"ruleId":"192","severity":1,"message":"214","line":25,"column":8,"nodeType":"194","endLine":25,"endColumn":20,"suggestions":"215"},{"ruleId":"196","severity":1,"message":"216","line":3,"column":84,"nodeType":"198","messageId":"199","endLine":3,"endColumn":94},{"ruleId":"192","severity":1,"message":"217","line":28,"column":8,"nodeType":"194","endLine":28,"endColumn":20,"suggestions":"218"},{"ruleId":"192","severity":1,"message":"219","line":18,"column":8,"nodeType":"194","endLine":18,"endColumn":20,"suggestions":"220"},{"ruleId":"196","severity":1,"message":"221","line":21,"column":26,"nodeType":"198","messageId":"199","endLine":21,"endColumn":41},{"ruleId":"196","severity":1,"message":"222","line":27,"column":18,"nodeType":"198","messageId":"199","endLine":27,"endColumn":29},{"ruleId":"192","severity":1,"message":"223","line":73,"column":8,"nodeType":"194","endLine":73,"endColumn":19,"suggestions":"224"},{"ruleId":"196","severity":1,"message":"206","line":2,"column":20,"nodeType":"198","messageId":"199","endLine":2,"endColumn":24},{"ruleId":"192","severity":1,"message":"225","line":84,"column":8,"nodeType":"194","endLine":84,"endColumn":20,"suggestions":"226"},{"ruleId":"192","severity":1,"message":"219","line":19,"column":8,"nodeType":"194","endLine":19,"endColumn":20,"suggestions":"227"},{"ruleId":"192","severity":1,"message":"228","line":42,"column":8,"nodeType":"194","endLine":42,"endColumn":20,"suggestions":"229"},"no-native-reassign",["230"],"no-negated-in-lhs",["231"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'getAccessTokenSilently'. Either include it or remove the dependency array.","ArrayExpression",["232"],"no-unused-vars","'accessToken' is assigned a value but never used.","Identifier","unusedVar","'Button' is defined but never used.","React Hook React.useEffect has a missing dependency: 'pedidos'. Either include it or remove the dependency array.",["233"],"'isLoading' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'pedidosAnual'. Either include it or remove the dependency array.",["234"],"'Link' is defined but never used.","'useGetRubricasByEmppresa' is defined but never used.","React Hook React.useEffect has missing dependencies: 'date', 'empresasList', 'grupos.data', 'id', 'pedido.cabimento', 'pedido.data.artigos', 'pedido.data.data_pedido', 'pedido.data.data_pedido_formated', 'pedido.data.day', 'pedido.data.empresa', 'pedido.data.faturas', 'pedido.data.grupo', 'pedido.data.grupo_abrv', 'pedido.data.grupo_id', 'pedido.data.mounth', 'pedido.data.ne', 'pedido.data.notas', 'pedido.data.proposta', 'pedido.data.remetente', 'pedido.data.responsavel', 'pedido.data.rubrica', 'pedido.data.valor_total', 'pedido.data.year', and 'today'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSubmitData' needs the current value of 'empresasList'.",["235"],"React Hook React.useEffect has missing dependencies: 'empresas.data', 'setEmpresasList', 'setFetchEmpresas', 'setSubmitData', and 'submitData'. Either include them or remove the dependency array. If 'setSubmitData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["236"],"React Hook React.useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.",["237"],"React Hook React.useEffect has missing dependencies: 'articles.data', 'setArticlesResult', and 'setPerformSearch'. Either include them or remove the dependency array. If 'setArticlesResult' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["238"],"'Typography' is defined but never used.","React Hook React.useEffect has missing dependencies: 'pedidos' and 'setPedidosList'. Either include them or remove the dependency array. If 'setPedidosList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["239"],"React Hook React.useEffect has missing dependencies: 'result' and 'setDeleteResult'. Either include them or remove the dependency array. If 'setDeleteResult' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["240"],"'setSelectedYear' is assigned a value but never used.","'refetchDist' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'distAnual.data' and 'grupos.data'. Either include them or remove the dependency array.",["241"],"React Hook React.useEffect has missing dependencies: 'grupo.data.abrv', 'grupo.data.color', 'grupo.data.membros', 'grupo.data.name', and 'id'. Either include them or remove the dependency array.",["242"],["243"],"React Hook React.useEffect has missing dependencies: 'membros.data' and 'selectedYear'. Either include them or remove the dependency array.",["244"],"no-global-assign","no-unsafe-negation",{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"261","fix":"267"},{"desc":"268","fix":"269"},"Update the dependencies array to be: [getAccessTokenSilently]",{"range":"270","text":"271"},"Update the dependencies array to be: [fetchingPedidos, pedidos]",{"range":"272","text":"273"},"Update the dependencies array to be: [fetchingPedidosAnual, pedidosAnual]",{"range":"274","text":"275"},"Update the dependencies array to be: [date, empresasList, grupos.data, id, isLoading, pedido.cabimento, pedido.data.artigos, pedido.data.data_pedido, pedido.data.data_pedido_formated, pedido.data.day, pedido.data.empresa, pedido.data.faturas, pedido.data.grupo, pedido.data.grupo_abrv, pedido.data.grupo_id, pedido.data.mounth, pedido.data.ne, pedido.data.notas, pedido.data.proposta, pedido.data.remetente, pedido.data.responsavel, pedido.data.rubrica, pedido.data.valor_total, pedido.data.year, today]",{"range":"276","text":"277"},"Update the dependencies array to be: [empresas.data, isFetching, setEmpresasList, setFetchEmpresas, setSubmitData, submitData]",{"range":"278","text":"279"},"Update the dependencies array to be: [performSearch, refetch]",{"range":"280","text":"281"},"Update the dependencies array to be: [articles.data, isFetching, setArticlesResult, setPerformSearch]",{"range":"282","text":"283"},"Update the dependencies array to be: [isFetching, pedidos, setPedidosList]",{"range":"284","text":"285"},"Update the dependencies array to be: [isFetching, result, setDeleteResult]",{"range":"286","text":"287"},"Update the dependencies array to be: [distAnual.data, grupos.data, isLoading]",{"range":"288","text":"289"},"Update the dependencies array to be: [grupo.data.abrv, grupo.data.color, grupo.data.membros, grupo.data.name, id, isFetching]",{"range":"290","text":"291"},{"range":"292","text":"287"},"Update the dependencies array to be: [isFetching, membros.data, selectedYear]",{"range":"293","text":"294"},[1817,1819],"[getAccessTokenSilently]",[2570,2587],"[fetchingPedidos, pedidos]",[1107,1129],"[fetchingPedidosAnual, pedidosAnual]",[6210,6221],"[date, empresasList, grupos.data, id, isLoading, pedido.cabimento, pedido.data.artigos, pedido.data.data_pedido, pedido.data.data_pedido_formated, pedido.data.day, pedido.data.empresa, pedido.data.faturas, pedido.data.grupo, pedido.data.grupo_abrv, pedido.data.grupo_id, pedido.data.mounth, pedido.data.ne, pedido.data.notas, pedido.data.proposta, pedido.data.remetente, pedido.data.responsavel, pedido.data.rubrica, pedido.data.valor_total, pedido.data.year, today]",[25609,25621],"[empresas.data, isFetching, setEmpresasList, setFetchEmpresas, setSubmitData, submitData]",[397,412],"[performSearch, refetch]",[572,584],"[articles.data, isFetching, setArticlesResult, setPerformSearch]",[746,758],"[isFetching, pedidos, setPedidosList]",[409,421],"[isFetching, result, setDeleteResult]",[2699,2710],"[distAnual.data, grupos.data, isLoading]",[2747,2759],"[grupo.data.abrv, grupo.data.color, grupo.data.membros, grupo.data.name, id, isFetching]",[409,421],[1504,1516],"[isFetching, membros.data, selectedYear]"]